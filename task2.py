# -*- coding: utf-8 -*-
"""Task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xerb0EdyzUgolFhWi_B40CTQ8rXZcKkc

**Importing libraries and models(Tensorflow and keras)**
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

"""**Read train and test files**"""

train_data = pd.read_csv("/content/train.csv")
test_data = pd.read_csv("/content/test.csv")

"""**Separate the labels (the digits) from the pixel values of the images**"""

train_labels = train_data["label"]
train_images = train_data.drop("label", axis=1)
test_images = test_data

"""**Reshape the pixel values into a 28x28 pixel image format and normalize the values**"""

train_images = train_images.values.reshape(-1, 28, 28, 1) / 255.0
test_images = test_images.values.reshape(-1, 28, 28, 1) / 255.0

"""**Encode the labels**"""

train_labels = to_categorical(train_labels, num_classes=10)

"""**Define the model and its Layers**"""

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(10, activation='softmax')
])

"""**Compile the model and train it using the training data**"""

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.fit(train_images, train_labels, epochs=50)

"""**Test the model on the testing data**"""

test_predictions = model.predict(test_images)
test_predictions = np.argmax(test_predictions, axis=1)

"""**Test the model on different images samples **"""

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

# Define a list of label names
label_names = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]

# Load the image from Google Drive
image = cv2.imread("/content/test.png")

# Resize the image to (28, 28)
resized_image = cv2.resize(image, (28, 28))

# Convert the image to grayscale
gray_image = cv2.cvtColor(resized_image, cv2.COLOR_BGR2GRAY)

# Reshape the image to (28, 28, 1)
final_image = gray_image.reshape((28, 28, 1))

# Normalize the pixel values
final_image = final_image / 255.0

# Predict the label using the trained model
predictions = model.predict(np.array([final_image]))
predicted_label_index = np.argmax(predictions)
predicted_label_name = label_names[predicted_label_index]

# Print the predicted label name and display the image
print("Predicted label:", predicted_label_name)
cv2_imshow(image)

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

# Define a list of label names
label_names = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]

# Load the image from Google Drive
image = cv2.imread("/content/test1.png")

# Resize the image to (28, 28)
resized_image = cv2.resize(image, (28, 28))

# Convert the image to grayscale
gray_image = cv2.cvtColor(resized_image, cv2.COLOR_BGR2GRAY)

# Reshape the image to (28, 28, 1)
final_image = gray_image.reshape((28, 28, 1))

# Normalize the pixel values
final_image = final_image / 255.0

# Predict the label using the trained model
predictions = model.predict(np.array([final_image]))
predicted_label_index = np.argmax(predictions)
predicted_label_name = label_names[predicted_label_index]

# Print the predicted label name and display the image
print("Predicted label:", predicted_label_name)
cv2_imshow(image)